template <class TArc>
void PGraph<TArc>::GORAjouterArc(TArc* TArcGRANewArc)
{
	vector<TArc*>& vTArc = this->GORGetvGORTArc();
	if (TArcGRANewArc->ARCGetNumeroD() == TArcGRANewArc->ARCGetNumeroA())
	{
		throw invalid_argument("Sommets identiques");
	}
	if (GORFindArc(TArcGRANewArc->ARCGetNumeroD(), TArcGRANewArc->ARCGetNumeroA()) != nullptr)
	{
		throw invalid_argument("Arc deja existant !");
	}
	if (this->GORFindSommet(TArcGRANewArc->ARCGetNumeroD()) == nullptr)
	{
		throw invalid_argument("Sommet 1 non existant");
	}
	if (this->GORFindSommet(TArcGRANewArc->ARCGetNumeroA()) == nullptr)
	{
		throw invalid_argument("Sommet 2 non existant");
	}

	this->GORFindSommet(TArcGRANewArc->ARCGetNumeroD())->SOMAjoutArcD(TArcGRANewArc);
	this->GORFindSommet(TArcGRANewArc->ARCGetNumeroA())->SOMAjoutArcA(TArcGRANewArc);

	vTArc.push_back(TArcGRANewArc);

	TArc* TArcGRAArcInverse = TArcGRANewArc->ARCArcInverse();

	this->GORFindSommet(TArcGRAArcInverse->ARCGetNumeroD())->SOMAjoutArcD(TArcGRAArcInverse);
	this->GORFindSommet(TArcGRAArcInverse->ARCGetNumeroA())->SOMAjoutArcA(TArcGRAArcInverse);

	vTArc.push_back(TArcGRAArcInverse);
}

template <class TArc>
void PGraph<TArc>::GORModifierArc(TArc* TArcGRAArc, unsigned int uiGRASommetD, unsigned int uiGRASommetA)
{
	if (GORFindArc(TArcGRAArc->ARCGetNumeroD(), TArcGRAArc->ARCGetNumeroA()) != nullptr)
	{
		throw invalid_argument("Ancien arc non present dans le graphe");
	}
	if (uiGRASommetD == uiGRASommetA)
	{
		throw invalid_argument("Sommets identiques");
	}
	if (GORFindArc(uiGRASommetA, uiGRASommetD) != nullptr)
	{
		throw invalid_argument("Arc deja existant");
	}
	if (this->GORFindSommet(uiGRASommetA) == nullptr)
	{
		throw invalid_argument("Sommet d'arrive non existant");
	}
	if (this->GORFindSommet(uiGRASommetD) == nullptr)
	{
		throw invalid_argument("Sommet de depart non existant");
	}

	unsigned int uiNumSommetD = TArcGRAArc->ARCGetNumeroD();
	unsigned int uiNumSommetA = TArcGRAArc->ARCGetNumeroA();

	PSommet<TArc>* ptrPSommetD = this->GORFindSommet(uiNumSommetD);
	PSommet<TArc>* ptrPSommetA = this->GORFindSommet(uiNumSommetA);

	ptrPSommetD->SOMSupprArcD(TArcGRAArc);
	ptrPSommetA->SOMSupprArcA(TArcGRAArc);

	TArcGRAArc->ARCSetNumeroD(uiGRASommetA);
	TArcGRAArc->ARCSetNumeroA(uiGRASommetD);

	PSommet<TArc>* ptrPSommetnewD = this->GORFindSommet(uiGRASommetA);
	PSommet<TArc>* ptrPSommetnewA = this->GORFindSommet(uiGRASommetD);

	ptrPSommetnewD->SOMAjoutArcD(TArcGRAArc);
	ptrPSommetnewA->SOMAjoutArcA(TArcGRAArc);

	TArc* TArcGRAArcInverse = GORFindArc(uiNumSommetA, uiNumSommetD);

	uiNumSommetD = TArcGRAArcInverse->ARCGetNumeroD();
	uiNumSommetA = TArcGRAArcInverse->ARCGetNumeroA();

	ptrPSommetD = this->GORFindSommet(uiNumSommetD);
	ptrPSommetA = this->GORFindSommet(uiNumSommetA);

	ptrPSommetD->SOMSupprArcD(TArcGRAArcInverse);
	ptrPSommetA->SOMSupprArcA(TArcGRAArcInverse);

	TArcGRAArcInverse->ARCSetNumeroD(ptrPSommetD->SOMGetNumero());
	TArcGRAArcInverse->ARCSetNumeroA(ptrPSommetA->SOMGetNumero());

	ptrPSommetnewD = this->GORFindSommet(ptrPSommetD->SOMGetNumero());
	ptrPSommetnewA = this->GORFindSommet(ptrPSommetA->SOMGetNumero());

	ptrPSommetnewD->SOMAjoutArcD(TArcGRAArcInverse);
	ptrPSommetnewA->SOMAjoutArcA(TArcGRAArcInverse);
}

template <class TArc>
void PGraph<TArc>::GORSupprimerArc(TArc* TArcGRAArc)
{
	vector<TArc*>& vTArc = this->GORGetvGORTArc();
	if (GORFindArc(TArcGRAArc->ARCGetNumeroD(), TArcGRAArc->ARCGetNumeroA()) == nullptr)
	{
		throw invalid_argument("Arc non present dans le graphe");
	}

	unsigned int uiNumSommetD = TArcGRAArc->ARCGetNumeroD();
	unsigned int uiNumSommetA = TArcGRAArc->ARCGetNumeroA();

	TArc* TArcGRAArcInverse = GORFindArc(uiNumSommetA, uiNumSommetD);

	PSommet<TArc>* ptrPSommetD = this->GORFindSommet(uiNumSommetD);
	PSommet<TArc>* ptrPSommetA = this->GORFindSommet(uiNumSommetA);

	ptrPSommetD->SOMSupprArcD(TArcGRAArc);
	ptrPSommetA->SOMSupprArcA(TArcGRAArc);

	auto aIterator = find(vTArc.begin(), vTArc.end(), TArcGRAArc);
	vTArc.erase(aIterator);

	uiNumSommetD = TArcGRAArcInverse->ARCGetNumeroD();
	uiNumSommetA = TArcGRAArcInverse->ARCGetNumeroA();

	ptrPSommetD = this->GORFindSommet(uiNumSommetD);
	ptrPSommetA = this->GORFindSommet(uiNumSommetA);

	ptrPSommetD->SOMSupprArcD(TArcGRAArcInverse);
	ptrPSommetA->SOMSupprArcA(TArcGRAArcInverse);

	aIterator = find(vTArc.begin(), vTArc.end(), TArcGRAArcInverse);
	vTArc.erase(aIterator);

}

template <class TArc>
TArc* PGraph<TArc>:: GORFindArc(unsigned int uiGRANumSommetD, unsigned int uiGRANumSommetA)
{
	vector<TArc*>& vTArc = this->GORGetvGORTArc();
	TArc* ptrTArcArcTrouve = nullptr;
	size_t stIterator = 0;
	if (uiGRANumSommetD == uiGRANumSommetA)
	{
		throw invalid_argument("Les deux sommets specifies sont les mêmes, l'arc ne peut pas exister");
	}
	if (vTArc.empty() == false)
	{
		do
		{
			if (((vTArc[stIterator]->ARCGetNumeroD() == uiGRANumSommetD) &&
				(vTArc[stIterator]->ARCGetNumeroA() == uiGRANumSommetA)) ||
				((vTArc[stIterator]->ARCGetNumeroA() == uiGRANumSommetD) &&
					(vTArc[stIterator]->ARCGetNumeroD() == uiGRANumSommetA)))
			{
				ptrTArcArcTrouve = vTArc[stIterator];
			}
			stIterator++;
		} while (stIterator < vTArc.size() && ptrTArcArcTrouve == nullptr);
	}
	return ptrTArcArcTrouve;
}

template <class TArc>
void PGraph<TArc>::GORInverseAllArc()
{
	throw logic_error("Cette methode ne peut etre appelee que sur un graphe oriente !");
}