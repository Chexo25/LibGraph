template <template <class> class TGraph, class TArc>
TGraph<TArc>* Lecturefichier(const string sNomFichier)
{
    ifstream fFichier(sNomFichier);

    if (fFichier.is_open() != true)
    {
        throw invalid_argument("Le fichier n'est pas ouvert");
    }

    TGraph<TArc>* NewGraph = new TGraph<TArc>();
    string sBuffer;
    int iNbrSommet;
    int iNbrArc;
    int iIterator;

    PSommet<TArc>* NewSommet;

    getline(fFichier, sBuffer);
    iNbrSommet = stoul(sBuffer.substr(10, sBuffer.size()));

    getline(fFichier, sBuffer);
    iNbrArc = stoul(sBuffer.substr(7, sBuffer.size()));

    getline(fFichier, sBuffer);
    for (iIterator = 0; iIterator < iNbrSommet; iIterator++)
    {
        getline(fFichier, sBuffer);
        string Num = sBuffer.substr(7, sBuffer.size());
        unsigned int uiNum = stoul(Num);
        NewSommet = new PSommet<TArc>(uiNum);
        NewGraph->GORAjouterSommet(NewSommet);
    }

    getline(fFichier, sBuffer);

    getline(fFichier, sBuffer);
    unsigned int uiSommetD;
    unsigned int uiSommetA;
    for (iIterator = 0; iIterator < iNbrArc; iIterator++)
    {
        getline(fFichier, sBuffer);

        uiSommetD = stoul(sBuffer.substr(6, sBuffer.find(",", 0)));
        uiSommetA = stoul(sBuffer.substr(sBuffer.find(",", 0) + 6, sBuffer.size()));

        TArc* NewArc = new TArc(uiSommetD, uiSommetA);

        NewGraph->GORAjouterArc(NewArc);
    }

    fFichier.close();

    return NewGraph;
}