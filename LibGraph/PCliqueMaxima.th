template<class TArc>
PClique_max<TArc>::PClique_max()
{
}

template<class TArc>
PClique_max<TArc>::~PClique_max()
{
	CLIResetCliqueMax();
}

template<class TArc>
vector<vector<PSommet<TArc>*>> PClique_max<TArc>::CLIGetVvCliquesMax()
{
    return vvCliques_Max;
}

template <class TArc>
bool PClique_max<TArc>::CLIIsClique(const vector<PSommet<TArc>*>& CLIvSommet) {
	size_t stSizevSommet = CLIvSommet.size();
	if ((unsigned int)stSizevSommet == 1)
	{
		return true;
	}

	for (size_t stIndex1 = 0; stIndex1 < stSizevSommet; ++stIndex1) {
		for (size_t stIndex2 = stIndex1 + 1; stIndex2 < stSizevSommet; ++stIndex2) {
			PSommet<TArc>* PSommet1 = CLIvSommet[stIndex1];
			PSommet<TArc>* PSommet2 = CLIvSommet[stIndex2];
			bool bConnectes = false;

			for (TArc* arc : PSommet1->SOMGetArcD()) {
				if (arc->ARCGetNumeroA() == PSommet2->SOMGetNumero()) {
					bConnectes = true;
					break;
				}
			}

			if (!bConnectes)
			{
				return false;
			}
		}
	}
	return true;
}

template<class TArc>
void PClique_max<TArc>::CLIResetCliqueMax()
{
    stTailleMaxClique = 0;
    for (size_t stIterator = 0; stIterator < vvCliques_Max.size(); stIterator++)
    {
        vvCliques_Max[stIterator].clear();
    }
    vvCliques_Max.clear();
}

template<class TArc>
void PClique_max<TArc>::CLIEnuCliqueMax(PGraph<TArc> Graph, vector<PSommet<TArc>*> ListeSommet)
{
    vector<PSommet<TArc>*> vListeSommet = Graph.GORGetSommet();

    if (vListeSommet.size() == 0)
    {
        if (ListeSommet.size() > stTailleMaxClique)
        {
            CLIResetCliqueMax();
            stTailleMaxClique = ListeSommet.size();
            vvCliques_Max.push_back(ListeSommet);
        }
        else if (ListeSommet.size() == stTailleMaxClique)
        {
            vvCliques_Max.push_back(ListeSommet);
        }
        return;
    }

    for (size_t stIterator = 0; stIterator < vListeSommet.size(); stIterator++)
    {
        try {
            PSommet<TArc>* pSommet = vListeSommet[stIterator];

            PGraph<TArc> GraphCopy = Graph;

            vector<PSommet<TArc>*> ListeAvecSommet = ListeSommet;
            ListeAvecSommet.push_back(pSommet);

            GraphCopy.GORSupprimerSommet(pSommet);

            if (CLIIsClique(ListeAvecSommet))
            {
                CLIEnuCliqueMax(GraphCopy, ListeAvecSommet);
            }

            CLIEnuCliqueMax(GraphCopy, ListeSommet);
        }
        catch (const exception& e) {
            continue;
        }
    }
}
